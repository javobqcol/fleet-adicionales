# -*- coding: utf-8 -*-

from odoo import api, fields, models, _, tools
from odoo.exceptions import ValidationError
from dateutil.relativedelta import relativedelta
from odoo.exceptions import UserError
from odoo.osv import expression



class FleetVehicle(models.Model):
  _inherit = 'fleet.vehicle'
  _inherits = {'product.product': 'product_id'}

  responsable_id = fields.Many2one('res.users', 'Responsable')
  cubicaje = fields.Float('Cubicaje en M3')
  carga = fields.Float('Capacidad de carga en Kg')
  multi_images = fields.One2many('multi.images2', 'vehicle_id',
                                 'Multi Imagenes')
  fleet_attach_ids = fields.Many2many('ir.attachment',
                                      'fleet_vehicle_attachment_rel',
                                      'vehicle_id', 'attachment_id',
                                      string='Documentos Adjuntos')
  description = fields.Text(string='Acerca del vehículo', translate=True)
  vehicle_type_id = fields.Many2one('vehicle.type', string='Tipo Vehículo', ondelete='restrict', required=True)
  color_id = fields.Many2one('vehicle.color', string='Color del vehículo', ondelete='restrict')
  odometer_unit = fields.Selection(selection_add=[('hours', 'Horas')])
  numero_motor = fields.Char(String="Número de motor")
  mtto_cada = fields.Integer(string="Mantemimiento cada")
  aviso_a = fields.Integer(string="Aviso cada")
  proximo_mtto = fields.Float(String="Proximo mtto", compute='_get_last_odometer_service', readonly=True)
  falta_para_mtto = fields.Float(String="falta para mtto", compute='_get_last_odometer_service', readonly=True)
  falta = fields.Float(string="falta", store=False, readonly=True)
  col = fields.Char(compute='_get_last_odometer_service', store=False)
  servicio_ultimo_mtto = fields.Many2one('fleet.vehicle.log.services',
                                         string="Ultimo mtto preventivo",
                                         readonly=True,
                                         compute='_get_last_odometer_service',
                                         help='Ultimo mantenimiento preventivo',
                                         store=False)
  odometro_ultimo_mtto = fields.Float(string="Ultimo Servicio mantenimiento",
                                      readonly=True,
                                      help='Odometro ultimo mantenimiento preventivo',
                                      store=False)
  controlar_ids = fields.Many2many('fleet.vehicle.template',
                                   'fleet_vehicle_template_rel',
                                   'vehicle_id', 'template_id',
                                   domain="[('es_padre','=',True),('type_id','=',vehicle_type_id)]",
                                   options="{'no_create':True, 'color_field':'color'}")
  partes_ids = fields.One2many('fleet.vehicle.monitor', 'vehicle_id', string="Partes")

  product_id = fields.Many2one('product.product')



  def _get_default_state(self):
    state = self.env.ref('fleet-adicionales.type_activo', raise_if_not_found=False)
    return state if state and state.id else False

  def _get_odometer(self):
    FleetVehicalOdometer = self.env['fleet.vehicle.odometer']
    for record in self:
      vehicle_odometer = FleetVehicalOdometer.search([('vehicle_id', '=', record.id)], limit=1, order='value desc')
      if vehicle_odometer:
        record.odometer = vehicle_odometer.value_final
      else:
        record.odometer = 0

  @api.onchange('vehicle_type_id')
  def onchange_type(self):
    for record in self:
      if record.vehicle_type_id:
        record.odometer_unit = record.vehicle_type_id.unidades
        record.mtto_cada = record.vehicle_type_id.mtto_cada
        record.aviso_a = record.vehicle_type_id.aviso_a
        record.falta = (record.mtto_cada or 0) - (record.aviso_a or 0)

  def _get_last_odometer_service(self):
    self.odometro_ultimo_mtto = False
    self.servicio_ultimo_mtto = False
    self.proximo_mtto = False
    self.falta_para_mtto = False
    service = self.env.ref('fleet-adicionales.type_service_service_1', raise_if_not_found=False)
    for record in self:
      record.odometro_ultimo_mtto = False
      record.servicio_ultimo_mtto = False
      record.proximo_mtto = False
      record.falta_para_mtto = False
      record.col = 'negro'
      reg = record.env['fleet.vehicle.log.services'].search([('vehicle_id','=',record.id), ('cost_subtype_id', '=',  service and service.id or False, )], order='date desc', limit=1)
      if reg:
        record.servicio_ultimo_mtto = reg.id
        record.odometro_ultimo_mtto = reg.odometer
        record.proximo_mtto = record.odometro_ultimo_mtto + record.mtto_cada
        record.falta_para_mtto = record.proximo_mtto - record.odometer
        if (record.falta_para_mtto < record.falta):
          record.col='amarillo'
        if (record.falta_para_mtto < 0.0):
          record.col = 'rojo'

  def _set_odometer(self):
    for record in self:
      if record.odometer:
        date = fields.Date.context_today(record)
        data = {'value': record.odometer, 'date': date, 'vehicle_id': record.id}
        self.env['fleet.vehicle.odometer'].create(data)


  @api.model
  def default_get(self, default_fields):
    res = super().default_get(default_fields)
    res.update({
      'mtto_cada': self.vehicle_type_id.mtto_cada,
      'aviso_a': self.vehicle_type_id.aviso_a,
      'falta':  (self.mtto_cada or 0) - (self.aviso_a or 0)
    })
    return res

  def _asignarMonitor(self):
    for record in self:
      vehicle_id = record.id
      for reg in record.controlar_ids:
        monitor = record.env['fleet.vehicle.monitor'].search(
          [('parent_id', '=', reg.id), ('vehicle_id', '=', vehicle_id)])
        if not monitor:
          temp = record.env['fleet.vehicle.template'].browse(reg.id)
          if temp:
            for template in temp.child_ids:
              data = {'name': template.name,
                      'vehicle_id': vehicle_id,
                      'referencia': template.referencia,
                      'orden': template.orden,
                      'parent_id': template.parent_id.id,
                      'active': template.active, }
              monitor.create(data)

  @api.model
  def create(self, values):
    res = super().create(values)
    self._asignarMonitor()
    return res

  @api.model
  def write(self, values):
    res = super().write(values)
    self._asignarMonitor()
    return res

  def do_enviar_correo(self):
    template_id = self.env.ref('fleet-adicionales.email_template_vehicle_maintenance').id
    template = self.env['mail.template'].browse(template_id)
    template.send_mail(self.id, force_send=True)

  def run_planificador(self):
    """Busca todas las licencias,
    si la fecha de vencimiento es mayor que la fecha actual, pone su estado en inactivo"""
    activo = self.env.ref('fleet-adicionales.type_activo')
    proximo_mtto = self.env.ref('fleet-adicionales.type_proximo_mtto')
    mtto_urgente = self.env.ref('fleet-adicionales.type_mtto_urgente')

    vehiculos_activos = self.search([])

    for mtto in vehiculos_activos:
      print (mtto.state_id.id != mtto_urgente.id)
      print (mtto.state_id.id,' ', mtto_urgente.id)
      if (mtto.falta_para_mtto < 0.0) and (mtto.state_id.id != mtto_urgente.id) :
        mtto.write({'state_id': mtto_urgente.id})
        mtto.do_enviar_correo()
      elif (0.0 < mtto.falta_para_mtto < mtto.falta) and (mtto.state_id.id != proximo_mtto.id):
        mtto.write({'state_id': proximo_mtto.id})
        mtto.do_enviar_correo()




class MultiImages(models.Model):
  _name = "multi.images2"

  image = fields.Binary('Images')
  description = fields.Char('Description')
  title = fields.Char('title')
  vehicle_id = fields.Many2one('fleet.vehicle', 'Vehículo')


class VehicleType(models.Model):
  """Model Vehicle Type."""

  _name = 'vehicle.type'
  _description = 'Vehicle Type'

  code = fields.Selection([
    ('vehiculo', 'Vehículo'),
    ('maquinaria', 'Maquinaria Amarilla'),
  ], 'Tipo de maquinaria', default='vehiculo', help='Tipo de maquinaria', required=True)

  name = fields.Char(string='Name',
                     required=True,
                     translate=True)

  unidades = fields.Selection([
    ('kilometers', 'Kilometros'),
    ('miles', 'Millas'),
    ('hours', 'Horas'),
  ], 'Uniadades odometro', default='kilometers', help='Unidades de odometro', required=True)

  mtto_cada = fields.Integer(string="Mantemimiento a ")
  aviso_a = fields.Integer(string="Aviso a ")


class VehicleColor(models.Model):
  """Color Vehicle Type."""

  _name = 'vehicle.color'
  _description = 'Color del vehículo'
  _order = 'name'

  name = fields.Char(string='Color', required=True)


class VehicleWorkFactura(models.Model):
  """Inicio de labores del trabajo a realizar"""
  _name = 'vehicle.work.factura'
  _description = 'Fecha inicial, fecha final, estado del trabajo'

  @api.model
  def default_get(self, default_fields):
    res = super(VehicleWorkFactura, self).default_get(default_fields)
    country = self.env.ref('base.co', raise_if_not_found=False)
    res.update({
      'date': fields.Date.context_today(self),
      'country_id': country and country.id or False
    })
    return res

  fecha_inicio = fields.Date(string='Fecha inicial', default=fields.Date.today)
  date = fields.Date(string="fecha trabajo", required=True)
  name_seq = fields.Char(string='Consecutivo',
                         required=True,
                         copy=False,
                         readonly=True,
                         index=True,
                         default=lambda self: _('New'))
  company_id = fields.Many2one('res.company', 'Compañia', default=lambda self: self.env.company, ondelete='restrict')
  contractor_id = fields.Many2one('res.partner', 'Contratista', requiered=True, ondelete='restrict')
  fecha_final = fields.Date(string='Fecha final')
  contacto_id = fields.Many2one('res.partner', 'Responsable')
  active = fields.Boolean(string="Trabajo activo?", default=True)
  standby = fields.Boolean(string="Stand by?", default=False)
  country_id = fields.Many2one('res.country', string='Pais', ondelete='restrict')
  state_id = fields.Many2one("res.country.state", string='Departamento', ondelete='restrict',
                             domain="[('country_id', '=?', country_id)]")
  city = fields.Char(string="Ciudad - sitio de trabajo")

  state = fields.Selection([('por_iniciar', 'Por iniciar'),
                            ('activo', 'Activo'),
                            ('inactivo', 'Inactivo'),
                            ('cancelado', 'Cancelado'),
                            ('finalizado', 'Finalizado')],
                           string='Estado del trabajo',
                           default='activo',
                           help='Estado del trabajo',
                           required=True)

  unidades_standby = fields.Float(string="Unidades minimas", help="unidades (horas/kms) de standby", default=5.0)
  descripcion = fields.Text(string="Descripcion del trabajo",
                            placeholder="Espacio para describir detalles propios del trabajo")

  detalle_id = fields.One2many('vehicle.work.detalle', 'work_id')

  @api.model
  def create(self, vals):
    if vals.get('name_seq', _('New')) == _('New'):
      vals['name_seq'] = self.env['ir.sequence'].next_by_code('fleet-adicionales.vehicle.work.factura.sequence') or _(
        'New')
    result = super(VehicleWorkFactura, self).create(vals)
    return (result)

  def name_get(self):
    res = []
    for field in self:
      res.append((field.id, '%s (%s) - %s' % (field.name_seq, field.contractor_id.name, field.city)))
    return res


class VehicleWorkDetalle(models.Model):
  """que parte de la flota se dedicara a realizar un trabajo"""
  _name = 'vehicle.work.detalle'
  _description = 'Vehículos/Maquinaria destinada a un trabajo'

  work_id = fields.Many2one('vehicle.work.factura', 'Trabajo')

  vehicle_id = fields.Many2one('fleet.vehicle', 'vehículo a Asignar')
  company_id = fields.Many2one('res.company', 'Compañia', default=lambda self: self.env.company, ondelete='restrict')
  unit = fields.Selection(related='vehicle_id.odometer_unit', string="Unidades", readonly=True)
  # standby = fields.Boolean(string="Stand by?", default=False)
  # unidades_standby = fields.Float(string="Unidades minimas", help = "unidades (horas/kms) de standby")
  precio_unidad = fields.Float(string='Valor de la Hora')
  currency_id = fields.Many2one('res.currency', related='company_id.currency_id')


class FleetVehicleCost(models.Model):
  _inherit = 'fleet.vehicle.cost'

  driver_id = fields.Many2one('res.partner', string="Conductor")
  cost_subtype_id = fields.Many2one('fleet.service.type', 'Tipo Servicio')
  odometer_last = fields.Float(compute='_get_odometer', inverse='_set_odometer', string='Odometro final',
                               help='Odometro al final del servicio')
  work_id = fields.Many2one('vehicle.work.factura', 'Trabajo')

  @api.model
  def default_get(self, default_fields):
    res = super().default_get(default_fields)
    res.update({
      'amount': 0.0,
    })
    return res

  def _get_odometer(self):
    self.odometer = 0.0
    self.odometer_last = 0.0
    for record in self:
      record.odometer = False
      record.odometer_last = False
      if record.odometer_id:
        record.odometer = record.odometer_id.value
        record.odometer_last = record.odometer_id.value_final

  def _set_odometer(self):
    for record in self:
      if not record.odometer:
        raise UserError(_('Emptying the odometer value of a vehicle is not allowed.'))
      if record.cost_type in ('fuel', 'contract'):
        record.odometer_last = record.odometer
      if (record.cost_type in ('services') and (record.odometer or 0 != 0.0) and (record.odometer_last or 0) == 0):
        record.odometer_last = record.odometer
      data = {'value': record.odometer,
              'value_final': record.odometer_last,
              'total_unidades': ((record.odometer_last or 0) - (record.odometer or 0)) if ((
                                                                                             record.odometer_last or 0) - (
                                                                                             record.odometer or 0)) >= 0 else False,
              'date': record.date or fields.Date.context_today(record),
              'vehicle_id': record.vehicle_id.id,
              'driver_id': record.driver_id.id,
              'tipo_odometro': record.cost_type,
              'work_id': record.work_id}
      odometer = self.env['fleet.vehicle.odometer'].browse(record.odometer_id.id)
      if (record.odometer_last > 0) and (record.odometer > 0):
        if not odometer.id:
          odo_id = odometer.create(data)
          self.odometer_id = odo_id
        # odo_id tiene el valor del id del registro creado
        else:
          odo_id = odometer.update(data)

  @api.model_create_multi
  def create(self, vals_list):
    for data in vals_list:
      # make sure that the data are consistent with values of parent and contract records given
      if 'parent_id' in data and data['parent_id']:
        parent = self.browse(data['parent_id'])
        data['vehicle_id'] = parent.vehicle_id.id
        data['date'] = parent.date
        data['cost_type'] = parent.cost_type
      if 'contract_id' in data and data['contract_id']:
        contract = self.env['fleet.vehicle.log.contract'].browse(data['contract_id'])
        data['vehicle_id'] = contract.vehicle_id.id
        data['cost_subtype_id'] = contract.cost_subtype_id.id
        data['cost_type'] = contract.cost_type
      if 'odometer_last' in data and not data['odometer_last']:
        # if received value for odometer is 0, then remove it from the
        # data as it would result to the creation of a
        # odometer log with 0, which is to be avoided
        del data['odometer_last']
      if 'odometer' in data and not data['odometer']:
        # if received value for odometer is 0, then remove it from the
        # data as it would result to the creation of a
        # odometer log with 0, which is to be avoided
        del data['odometer']
      return super(FleetVehicleCost, self).create(vals_list)

class FleetVehicletemplate(models.Model):
  _name = 'fleet.vehicle.template'
  _description = 'base de datos de templates a monitorear'
  _order = "name asc, orden asc"

  name = fields.Char(string='Parte monitorear', compute='_nombre_completo', required=True, store=True)
  type_id = fields.Many2one('vehicle.type')
  referencia = fields.Char(string='Ref. ubicaciòn')
  orden = fields.Integer(string='orden detalle', default=1)
  parent_id = fields.Many2one('fleet.vehicle.template',string="Parte de")
  es_padre = fields.Boolean('Padre', default=True, compute='_nombre_completo', store=True)
  color = fields.Integer()
  active = fields.Boolean(string="activo", default=True)
  child_ids = fields.One2many('fleet.vehicle.template', 'parent_id', string='Partes', domain=[('active', '=', True)])
  name_corto = fields.Char(string='Pieza')


  @api.depends('name_corto', 'name')
  def _nombre_completo(self):
    for reg in self:
      if reg.parent_id:
        reg.name = '%s/%s' % (reg.parent_id.name_corto, reg.name_corto)
        reg.es_padre = False
      else:
        reg.name = reg.name_corto
        reg.es_padre = True

class ProductProduct(models.Model):
  _inherit = 'product.product'

class FleetVehicleMonitor(models.Model):
  _name = 'fleet.vehicle.monitor'
  _inherit = 'fleet.vehicle.template'
  _description = 'log de lo que de lo que se va a cuidar'
  _order = "vehicle_id asc, name asc, orden asc"

  vehicle_id = fields.Many2one('fleet.vehicle',string="Vehiculo")
  product_id = fields.Many2one('product.product', string="producto")
  serial = fields.Char(string= "Serial del elemento")
  inicial_id = fields.Many2one('fleet.vehicle.log.services', string='Servicio de adquisiòn')
  actual_id = fields.Many2one('fleet.vehicle.log.services', string='Ultimo servicio')
  garantia = fields.Boolean(string="Garantía")
  fecha = fields.Date('Fecha_fin_garantia')
  nota = fields.Text(string="Nota",
                     placeholder="Espacio para describir cualquier cosa reelevante")